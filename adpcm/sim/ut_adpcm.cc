#include <stdio.h>
#include <math.h>
#include "rc-unity.h"
#include "unity.h"
#include "adpcm_wrapper_sw.h"


/*
+--------------------------------------------------------------------------+
| * Test Vectors (added for CHStone)                                       |
|     input_data : input data                                               |
|     encode_data : expected output data for "encode"                  |
|     decode_data : expected output data for "decode"                      |
+--------------------------------------------------------------------------+
*/

#define SIZE 100
#define IN_END 100

const int input_data[SIZE] = {
  0x44, 0x44, 0x44, 0x44, 0x44,
  0x44, 0x44, 0x44, 0x44, 0x44,
  0x44, 0x44, 0x44, 0x44, 0x44,
  0x44, 0x44, 0x43, 0x43, 0x43,
  0x43, 0x43, 0x43, 0x43, 0x42,
  0x42, 0x42, 0x42, 0x42, 0x42,
  0x41, 0x41, 0x41, 0x41, 0x41,
  0x40, 0x40, 0x40, 0x40, 0x40,
  0x40, 0x40, 0x40, 0x3f, 0x3f,
  0x3f, 0x3f, 0x3f, 0x3e, 0x3e,
  0x3e, 0x3e, 0x3e, 0x3e, 0x3d,
  0x3d, 0x3d, 0x3d, 0x3d, 0x3d,
  0x3c, 0x3c, 0x3c, 0x3c, 0x3c,
  0x3c, 0x3c, 0x3c, 0x3c, 0x3b,
  0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
  0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
  0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
  0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
  0x3b, 0x3b, 0x3c, 0x3c, 0x3c,
  0x3c, 0x3c, 0x3c, 0x3c, 0x3c
};


int compressed[SIZE], result[SIZE];

/*
const int encode_data[SIZE] = {
  0xfd, 0xde, 0x77, 0xba, 0xf2, 
  0x90, 0x20, 0xa0, 0xec, 0xed, 
  0xef, 0xf1, 0xf3, 0xf4, 0xf5, 
  0xf5, 0xf5, 0xf5, 0xf6, 0xf6, 
  0xf6, 0xf7, 0xf8, 0xf7, 0xf8, 
  0xf7, 0xf9, 0xf8, 0xf7, 0xf9, 
  0xf8, 0xf8, 0xf6, 0xf8, 0xf8, 
  0xf7, 0xf9, 0xf9, 0xf9, 0xf8, 
  0xf7, 0xfa, 0xf8, 0xf8, 0xf7, 
  0xfb, 0xfa, 0xf9, 0xf8, 0xf8
};
*/
const int encode_data[SIZE] = {
  0xfd, 0xde, 0x77, 0xba, 0xf2, 
  0x90, 0x20, 0xa0, 0xec, 0xed, 
  0xef, 0xf1, 0xb3, 0xf4, 0xf5, 
  0xf5, 0xf5, 0xf5, 0xf6, 0xf6, 
  0xf6, 0xf7, 0xf8, 0xf7, 0xf8, 
  0xf8, 0xf6, 0xf8, 0xf7, 0xf8, 
  0xf8, 0xf8, 0xf8, 0xf7, 0xf9, 
  0xf7, 0xf9, 0xf9, 0xf9, 0xf9, 
  0xf8, 0xf7, 0xf9, 0xf8, 0xf8, 
  0xf7, 0xfb, 0xfa, 0xf9, 0xf8
  };

const int decode_data[SIZE] = {
  0, 0xffffffff, 0xffffffff, 0, 0, 
  0xffffffff, 0, 0, 0xffffffff, 0xffffffff, 
  0, 0, 0x1, 0x1, 0, 
  0xfffffffe, 0xffffffff, 0xfffffffe, 0, 0xfffffffc, 
  0x1, 0x1, 0x1, 0xfffffffb, 0x2, 
  0x2, 0x3, 0xb, 0x14, 0x14, 
  0x16, 0x18, 0x20, 0x20, 0x26, 
  0x28, 0x2e, 0x2f, 0x33, 0x32, 
  0x35, 0x33, 0x36, 0x34, 0x37, 
  0x34, 0x37, 0x35, 0x38, 0x36, 
  0x39, 0x38, 0x3b, 0x3a, 0x3f, 
  0x3f, 0x40, 0x3b, 0x3d, 0x3e, 
  0x41, 0x3d, 0x3c, 0x37, 0x3a, 
  0x3c, 0x3d, 0x38, 0x3a, 0x3c, 
  0x40, 0x3c, 0x3b, 0x39, 0x3c, 
  0x3c, 0x3b, 0x35, 0x38, 0x3c, 
  0x3f, 0x39, 0x3b, 0x3d, 0x41, 
  0x3d, 0x3e, 0x3c, 0x3f, 0x3e, 
  0x3f, 0x3a, 0x39, 0x37, 0x3a, 
  0x3b, 0x3e, 0x3a, 0x3b, 0x38
};


void setUp(void)
{
}

void tearDown(void)
{
}



void
test_adpcm_encode()
{
  int i;
  reset_wrapper();
  for (i = 0; i < IN_END; i += 2)
    compressed[i / 2] = encode_wrapper (input_data[i], input_data[i + 1]);
  

  for (i = 0; i < IN_END/2; i++)
    TEST_ASSERT_EQUAL(compressed[i], encode_data[i]);
}


void
test_adpcm_decode()
{
  int i, xout1, xout2;
  reset_wrapper();
  for (i = 0; i < IN_END; i += 2){
    decode_wrapper (encode_data[i / 2], &xout1, &xout2);
    result[i] = xout1;
    result[i + 1] = xout2;
  }

  for (i = 0; i < IN_END; i++)
    TEST_ASSERT_EQUAL(result[i], decode_data[i]);
}


